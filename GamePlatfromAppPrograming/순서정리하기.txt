1. 플랫폼(OS)
2.WinAPI / 콜백함수

3.포인터와 함수와 배열
-포인터와 함수: 참조에의한호출
-포인터와 배열: 배열이 인덱스로 접근가능한 원리
-함수포인터: 함수도 주소값이 있다. -> 콜백함수
-포인터와 동적할당:메모리를 실행중에 할당하면, 
 동적할당된 메모리의 주소를 저장하기위해서 포인터가 필요하다.
3.1.실전! 클래스의 설계 -> 실제 사용성이다보니 문법을 배우기 부족함.
3.2.디자인패턴
-싱글톤(정적맴버변수,클래스의 기본문법)
-데코레이터(=래퍼)(상속)
-옵저버(다형성-추상화,실체화,STL(vector,list)
-스테이트패턴-선언과 정의가 분리되야하는 이유:컴파일순서에 맞게 정리하기위해

4.MFC / 객체지향프로그래밍(C++)
-객체지향문법 -> WinAPI의 레퍼: MFC->WinFrom->MVC패턴:GUI와 게임처리부분이 분리됨.
-실전 클래스의 설계 -> 프로토타입개발후 리팩토링
-STL -> 자료구조 -> 연결리스트

5.크로스플랫폼 프로그래밍 
- OS환경설정 및 빌드하기
- 각 OS에 맞는 환경에 맞게 플랫폼 빌드를 수행함.

6.알고리즘
-자료구조: 배열,리스트,큐,스택,트리,그래프,해쉬맵
-게임수학(백터,행렬,중력구현하기,투사체):
-게임에 적절한 자료구조 사용하기
-알고리즘(A*):
